buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
project.ext{
    devVersionCode = 14
    releaseVersionCode = 1
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://raw.github.com/embarkmobile/zxing-android-minimal/mvn-repo/maven-repository/" }
    maven { url "https://jitpack.io" }
    maven { url "https://oss.sonatype.org/content/groups/public/" }
}

def getReleaseVersionCode() {
    def version = project.releaseVersionCode + 1
    project.releaseVersionCode = version
    println sprintf("Returning version %d", version)
    return version
}

def getDevVersionCode() {
    def version = project.devVersionCode + 1
    project.devVersionCode = version
    println sprintf("Returning version %d", version)
    return version
}

android {
    compileSdkVersion 29
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.dexdrip.stephenblack.nightwatch"
        minSdkVersion 26
        targetSdkVersion 29
        versionName '2.0.8'
        multiDexEnabled true

//        javaCompileOptions {
//            annotationProcessorOptions {
//                includeCompileClasspath = true
//            }
//        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        def project = "NightWatch"
        def SEP = "_"
        def date = new Date()
        def formattedDate = date.format('MMddyy_HHmm')
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                println( "Build Variant " + variant.getName() )
                variant.outputs.each { output ->
                    def version = defaultConfig.versionName
                    def versionCode = variant.versionCode
                    def buildType = variant.variantData.variantConfiguration.buildType.name
                    def flavor = variant.productFlavors[0].name
                    def newApkName = project + SEP + flavor + SEP + buildType + SEP + version + SEP + versionCode + SEP + formattedDate + ".apk"
                    output.outputFileName = newApkName
                }
            }
        }
        debug {
            applicationVariants.all { variant ->
            println( "Build Variant " + variant.getName() )
                variant.outputs.each { output ->
                    def version = defaultConfig.versionName
                    def versionCode = variant.versionCode
                    def buildType = variant.variantData.variantConfiguration.buildType.name
                    def newApkName = project + SEP + buildType + SEP + version + SEP + versionCode + ".apk"
                    output.outputFileName = newApkName
                }
            }
        }
    }
    productFlavors {
        dev {
            versionCode getDevVersionCode()
        }
    }
    flavorDimensions 'build'
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation fileTree( dir: 'libs')
    wearApp project(':wear')
    implementation 'com.squareup.retrofit:converter-gson:2.0.0-beta2'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.1'
    implementation 'com.squareup.okhttp3:okhttp:4.4.0'
    implementation 'com.google.android.gms:play-services-wearable:17.0.0'
    implementation 'com.getpebble:pebblekit:4.0.1'
    implementation 'com.github.lecho:hellocharts-android:v1.5.5'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    implementation 'junit:junit:4.13'
    implementation 'androidx.fragment:fragment:1.2.2'
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    //implementation 'org.testifyproject.mock:mockito:1.0.6'
}
